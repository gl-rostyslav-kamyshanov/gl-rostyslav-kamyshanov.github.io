import{bk as C,bt as u,r as D,aI as O,bu as B,b3 as R,R as M,aR as E,O as H,bm as p,bv as S,ag as V,j as g}from"./D1PGu32k.js";const j=e=>e==="defer"||e===!1;function N(...e){const n=typeof e[e.length-1]=="string"?e.pop():void 0;typeof e[0]!="string"&&e.unshift(n);let[s,f,t={}]=e;if(typeof s!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof f!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const a=C(),P=f,b=()=>u.value,w=()=>a.isHydrating?a.payload.data[s]:a.static.data[s];t.server??=!0,t.default??=b,t.getCachedData??=w,t.lazy??=!1,t.immediate??=!0,t.deep??=u.deep,t.dedupe??="cancel";const d=t.getCachedData(s,a),_=d!=null;if(!a._asyncData[s]||!t.immediate){a.payload._errors[s]??=u.errorValue;const o=t.deep?D:O;a._asyncData[s]={data:o(_?d:t.default()),pending:D(!_),error:B(a.payload._errors,s),status:D("idle"),_default:t.default}}const r={...a._asyncData[s]};delete r._default,r.refresh=r.execute=(o={})=>{if(a._asyncDataPromises[s]){if(j(o.dedupe??t.dedupe))return a._asyncDataPromises[s];a._asyncDataPromises[s].cancelled=!0}if(o._initial||a.isHydrating&&o._initial!==!1){const c=o._initial?d:t.getCachedData(s,a);if(c!=null)return Promise.resolve(c)}r.pending.value=!0,r.status.value="pending";const l=new Promise((c,i)=>{try{c(P(a))}catch(y){i(y)}}).then(async c=>{if(l.cancelled)return a._asyncDataPromises[s];let i=c;t.transform&&(i=await t.transform(c)),t.pick&&(i=I(i,t.pick)),a.payload.data[s]=i,r.data.value=i,r.error.value=u.errorValue,r.status.value="success"}).catch(c=>{if(l.cancelled)return a._asyncDataPromises[s];r.error.value=V(c),r.data.value=g(t.default()),r.status.value="error"}).finally(()=>{l.cancelled||(r.pending.value=!1,delete a._asyncDataPromises[s])});return a._asyncDataPromises[s]=l,a._asyncDataPromises[s]},r.clear=()=>z(a,s);const h=()=>r.refresh({_initial:!0}),m=t.server!==!1&&a.payload.serverRendered;{const o=R();if(o&&m&&t.immediate&&!o.sp&&(o.sp=[]),o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const i=o._nuxtOnBeforeMountCbs;M(()=>{i.forEach(y=>{y()}),i.splice(0,i.length)}),E(()=>i.splice(0,i.length))}m&&a.isHydrating&&(r.error.value||d!=null)?(r.pending.value=!1,r.status.value=r.error.value?"error":"success"):o&&(a.payload.serverRendered&&a.isHydrating||t.lazy)&&t.immediate?o._nuxtOnBeforeMountCbs.push(h):t.immediate&&h();const l=S();if(t.watch){const i=H(t.watch,()=>r.refresh());l&&p(i)}const c=a.hook("app:data:refresh",async i=>{(!i||i.includes(s))&&await r.refresh()});l&&p(c)}const v=Promise.resolve(a._asyncDataPromises[s]).then(()=>r);return Object.assign(v,r),v}function z(e,n){n in e.payload.data&&(e.payload.data[n]=void 0),n in e.payload._errors&&(e.payload._errors[n]=u.errorValue),e._asyncData[n]&&(e._asyncData[n].data.value=g(e._asyncData[n]._default()),e._asyncData[n].error.value=u.errorValue,e._asyncData[n].pending.value=!1,e._asyncData[n].status.value="idle"),n in e._asyncDataPromises&&(e._asyncDataPromises[n]&&(e._asyncDataPromises[n].cancelled=!0),e._asyncDataPromises[n]=void 0)}function I(e,n){const s={};for(const f of n)s[f]=e[f];return s}export{N as u};
