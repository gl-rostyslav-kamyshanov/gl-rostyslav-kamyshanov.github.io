{"version":3,"file":"wMSAMjdF.js","sources":["../../../../node_modules/.pnpm/perfect-debounce@1.0.0/node_modules/perfect-debounce/dist/index.mjs","../../../../node_modules/.pnpm/nuxt@4.0.3_@types+node@20.17.30_@vue+compiler-sfc@3.5.20_eslint@9.24.0_rollup@4.49.0_sass@1.8_w2etmzr24wz7alwc6jub3qfyoe/node_modules/nuxt/dist/app/composables/asyncData.js"],"sourcesContent":["const DEBOUNCE_DEFAULTS = {\n  trailing: true\n};\nfunction debounce(fn, wait = 25, options = {}) {\n  options = { ...DEBOUNCE_DEFAULTS, ...options };\n  if (!Number.isFinite(wait)) {\n    throw new TypeError(\"Expected `wait` to be a finite number\");\n  }\n  let leadingValue;\n  let timeout;\n  let resolveList = [];\n  let currentPromise;\n  let trailingArgs;\n  const applyFn = (_this, args) => {\n    currentPromise = _applyPromised(fn, _this, args);\n    currentPromise.finally(() => {\n      currentPromise = null;\n      if (options.trailing && trailingArgs && !timeout) {\n        const promise = applyFn(_this, trailingArgs);\n        trailingArgs = null;\n        return promise;\n      }\n    });\n    return currentPromise;\n  };\n  return function(...args) {\n    if (currentPromise) {\n      if (options.trailing) {\n        trailingArgs = args;\n      }\n      return currentPromise;\n    }\n    return new Promise((resolve) => {\n      const shouldCallNow = !timeout && options.leading;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        timeout = null;\n        const promise = options.leading ? leadingValue : applyFn(this, args);\n        for (const _resolve of resolveList) {\n          _resolve(promise);\n        }\n        resolveList = [];\n      }, wait);\n      if (shouldCallNow) {\n        leadingValue = applyFn(this, args);\n        resolve(leadingValue);\n      } else {\n        resolveList.push(resolve);\n      }\n    });\n  };\n}\nasync function _applyPromised(fn, _this, args) {\n  return await fn.apply(_this, args);\n}\n\nexport { debounce };\n","import { computed, getCurrentInstance, getCurrentScope, inject, isShallow, nextTick, onBeforeMount, onScopeDispose, onServerPrefetch, onUnmounted, ref, shallowRef, toRef, toValue, unref, watch } from \"vue\";\nimport { captureStackTrace } from \"errx\";\nimport { debounce } from \"perfect-debounce\";\nimport { hash } from \"ohash\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nimport { clientOnlySymbol } from \"../components/client-only.js\";\nimport { createError } from \"./error.js\";\nimport { onNuxtReady } from \"./ready.js\";\nimport { asyncDataDefaults, granularCachedData, pendingWhenIdle, purgeCachedData } from \"#build/nuxt.config.mjs\";\nexport function useAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (_isAutoKeyNeeded(args[0], args[1])) {\n    args.unshift(autoKey);\n  }\n  let [_key, _handler, options = {}] = args;\n  const key = computed(() => toValue(_key));\n  if (typeof key.value !== \"string\") {\n    throw new TypeError(\"[nuxt] [useAsyncData] key must be a string.\");\n  }\n  if (typeof _handler !== \"function\") {\n    throw new TypeError(\"[nuxt] [useAsyncData] handler must be a function.\");\n  }\n  const nuxtApp = useNuxtApp();\n  options.server ??= true;\n  options.default ??= getDefault;\n  options.getCachedData ??= getDefaultCachedData;\n  options.lazy ??= false;\n  options.immediate ??= true;\n  options.deep ??= asyncDataDefaults.deep;\n  options.dedupe ??= \"cancel\";\n  const functionName = options._functionName || \"useAsyncData\";\n  const currentData = nuxtApp._asyncData[key.value];\n  if (isDev && currentData) {\n    const warnings = [];\n    const values = createHash(_handler, options);\n    if (values.handler !== currentData._hash?.handler) {\n      warnings.push(`different handler`);\n    }\n    for (const opt of [\"transform\", \"pick\", \"getCachedData\"]) {\n      if (values[opt] !== currentData._hash[opt]) {\n        warnings.push(`different \\`${opt}\\` option`);\n      }\n    }\n    if (currentData._default.toString() !== options.default.toString()) {\n      warnings.push(`different \\`default\\` value`);\n    }\n    if (options.deep && isShallow(currentData.data)) {\n      warnings.push(`mismatching \\`deep\\` option`);\n    }\n    if (warnings.length) {\n      const distURL = import.meta.url.replace(/\\/app\\/.*$/, \"/app\");\n      const { source, line, column } = captureStackTrace().find((entry) => !entry.source.startsWith(distURL)) ?? {};\n      const explanation = source ? ` (used at ${source.replace(/^file:\\/\\//, \"\")}:${line}:${column})` : \"\";\n      console.warn(`[nuxt] [${functionName}] Incompatible options detected for \"${key.value}\"${explanation}:\n${warnings.map((w) => `- ${w}`).join(\"\\n\")}\nYou can use a different key or move the call to a composable to ensure the options are shared across calls.`);\n    }\n  }\n  const initialFetchOptions = { cause: \"initial\", dedupe: options.dedupe };\n  if (!nuxtApp._asyncData[key.value]?._init) {\n    initialFetchOptions.cachedData = options.getCachedData(key.value, nuxtApp, { cause: \"initial\" });\n    nuxtApp._asyncData[key.value] = createAsyncData(nuxtApp, key.value, _handler, options, initialFetchOptions.cachedData);\n  }\n  const asyncData = nuxtApp._asyncData[key.value];\n  asyncData._deps++;\n  const initialFetch = () => nuxtApp._asyncData[key.value].execute(initialFetchOptions);\n  const fetchOnServer = options.server !== false && nuxtApp.payload.serverRendered;\n  if (import.meta.server && fetchOnServer && options.immediate) {\n    const promise = initialFetch();\n    if (getCurrentInstance()) {\n      onServerPrefetch(() => promise);\n    } else {\n      nuxtApp.hook(\"app:created\", async () => {\n        await promise;\n      });\n    }\n  }\n  if (import.meta.client) {\n    let unregister = function(key2) {\n      const data = nuxtApp._asyncData[key2];\n      if (data?._deps) {\n        data._deps--;\n        if (data._deps === 0) {\n          data?._off();\n        }\n      }\n    };\n    const instance = getCurrentInstance();\n    if (instance && fetchOnServer && options.immediate && !instance.sp) {\n      instance.sp = [];\n    }\n    if (import.meta.dev && !nuxtApp.isHydrating && !nuxtApp._processingMiddleware && (!instance || instance?.isMounted)) {\n      console.warn(`[nuxt] [${functionName}] Component is already mounted, please use $fetch instead. See https://nuxt.com/docs/getting-started/data-fetching`);\n    }\n    if (instance && !instance._nuxtOnBeforeMountCbs) {\n      instance._nuxtOnBeforeMountCbs = [];\n      const cbs = instance._nuxtOnBeforeMountCbs;\n      onBeforeMount(() => {\n        cbs.forEach((cb) => {\n          cb();\n        });\n        cbs.splice(0, cbs.length);\n      });\n      onUnmounted(() => cbs.splice(0, cbs.length));\n    }\n    const isWithinClientOnly = instance && (instance._nuxtClientOnly || inject(clientOnlySymbol, false));\n    if (fetchOnServer && nuxtApp.isHydrating && (asyncData.error.value || asyncData.data.value !== void 0)) {\n      if (pendingWhenIdle) {\n        asyncData.pending.value = false;\n      }\n      asyncData.status.value = asyncData.error.value ? \"error\" : \"success\";\n    } else if (instance && (!isWithinClientOnly && nuxtApp.payload.serverRendered && nuxtApp.isHydrating || options.lazy) && options.immediate) {\n      instance._nuxtOnBeforeMountCbs.push(initialFetch);\n    } else if (options.immediate && asyncData.status.value !== \"success\") {\n      initialFetch();\n    }\n    const hasScope = getCurrentScope();\n    const unsubExecute = watch([key, ...options.watch || []], ([newKey], [oldKey]) => {\n      if ((newKey || oldKey) && newKey !== oldKey) {\n        const hasRun = nuxtApp._asyncData[oldKey]?.data.value !== void 0;\n        const isRunning = nuxtApp._asyncDataPromises[oldKey] !== void 0;\n        if (oldKey) {\n          unregister(oldKey);\n        }\n        const initialFetchOptions2 = { cause: \"initial\", dedupe: options.dedupe };\n        if (!nuxtApp._asyncData[newKey]?._init) {\n          let value;\n          if (oldKey && hasRun) {\n            value = nuxtApp._asyncData[oldKey]?.data.value;\n          } else {\n            value = options.getCachedData(newKey, nuxtApp, { cause: \"initial\" });\n            initialFetchOptions2.cachedData = value;\n          }\n          nuxtApp._asyncData[newKey] = createAsyncData(nuxtApp, newKey, _handler, options, value);\n        }\n        nuxtApp._asyncData[newKey]._deps++;\n        if (options.immediate || hasRun || isRunning) {\n          nuxtApp._asyncData[newKey].execute(initialFetchOptions2);\n        }\n      } else {\n        asyncData._execute({ cause: \"watch\", dedupe: options.dedupe });\n      }\n    }, { flush: \"sync\" });\n    if (hasScope) {\n      onScopeDispose(() => {\n        unsubExecute();\n        unregister(key.value);\n      });\n    }\n  }\n  const asyncReturn = {\n    data: writableComputedRef(() => nuxtApp._asyncData[key.value]?.data),\n    pending: writableComputedRef(() => nuxtApp._asyncData[key.value]?.pending),\n    status: writableComputedRef(() => nuxtApp._asyncData[key.value]?.status),\n    error: writableComputedRef(() => nuxtApp._asyncData[key.value]?.error),\n    refresh: (...args2) => nuxtApp._asyncData[key.value].execute(...args2),\n    execute: (...args2) => nuxtApp._asyncData[key.value].execute(...args2),\n    clear: () => clearNuxtDataByKey(nuxtApp, key.value)\n  };\n  const asyncDataPromise = Promise.resolve(nuxtApp._asyncDataPromises[key.value]).then(() => asyncReturn);\n  Object.assign(asyncDataPromise, asyncReturn);\n  return asyncDataPromise;\n}\nfunction writableComputedRef(getter) {\n  return computed({\n    get() {\n      return getter()?.value;\n    },\n    set(value) {\n      const ref2 = getter();\n      if (ref2) {\n        ref2.value = value;\n      }\n    }\n  });\n}\nexport function useLazyAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (_isAutoKeyNeeded(args[0], args[1])) {\n    args.unshift(autoKey);\n  }\n  const [key, handler, options = {}] = args;\n  if (import.meta.dev) {\n    options._functionName ||= \"useLazyAsyncData\";\n  }\n  return useAsyncData(key, handler, { ...options, lazy: true }, null);\n}\nfunction _isAutoKeyNeeded(keyOrFetcher, fetcher) {\n  if (typeof keyOrFetcher === \"string\") {\n    return false;\n  }\n  if (typeof keyOrFetcher === \"object\" && keyOrFetcher !== null) {\n    return false;\n  }\n  if (typeof keyOrFetcher === \"function\" && typeof fetcher === \"function\") {\n    return false;\n  }\n  return true;\n}\nexport function useNuxtData(key) {\n  const nuxtApp = useNuxtApp();\n  if (!(key in nuxtApp.payload.data)) {\n    nuxtApp.payload.data[key] = void 0;\n  }\n  if (nuxtApp._asyncData[key]) {\n    const data = nuxtApp._asyncData[key];\n    data._deps++;\n    if (getCurrentScope()) {\n      onScopeDispose(() => {\n        data._deps--;\n        if (data._deps === 0) {\n          data?._off();\n        }\n      });\n    }\n  }\n  return {\n    data: computed({\n      get() {\n        return nuxtApp._asyncData[key]?.data.value ?? nuxtApp.payload.data[key];\n      },\n      set(value) {\n        if (nuxtApp._asyncData[key]) {\n          nuxtApp._asyncData[key].data.value = value;\n        } else {\n          nuxtApp.payload.data[key] = value;\n        }\n      }\n    })\n  };\n}\nexport async function refreshNuxtData(keys) {\n  if (import.meta.server) {\n    return Promise.resolve();\n  }\n  await new Promise((resolve) => onNuxtReady(resolve));\n  const _keys = keys ? toArray(keys) : void 0;\n  await useNuxtApp().hooks.callHookParallel(\"app:data:refresh\", _keys);\n}\nexport function clearNuxtData(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.data);\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const key of _keys) {\n    clearNuxtDataByKey(nuxtApp, key);\n  }\n}\nfunction clearNuxtDataByKey(nuxtApp, key) {\n  if (key in nuxtApp.payload.data) {\n    nuxtApp.payload.data[key] = void 0;\n  }\n  if (key in nuxtApp.payload._errors) {\n    nuxtApp.payload._errors[key] = void 0;\n  }\n  if (nuxtApp._asyncData[key]) {\n    nuxtApp._asyncData[key].data.value = unref(nuxtApp._asyncData[key]._default());\n    nuxtApp._asyncData[key].error.value = void 0;\n    if (pendingWhenIdle) {\n      nuxtApp._asyncData[key].pending.value = false;\n    }\n    nuxtApp._asyncData[key].status.value = \"idle\";\n  }\n  if (key in nuxtApp._asyncDataPromises) {\n    if (nuxtApp._asyncDataPromises[key]) {\n      nuxtApp._asyncDataPromises[key].cancelled = true;\n    }\n    nuxtApp._asyncDataPromises[key] = void 0;\n  }\n}\nfunction pick(obj, keys) {\n  const newObj = {};\n  for (const key of keys) {\n    newObj[key] = obj[key];\n  }\n  return newObj;\n}\nconst isDev = import.meta.dev;\nfunction createAsyncData(nuxtApp, key, _handler, options, initialCachedData) {\n  nuxtApp.payload._errors[key] ??= void 0;\n  const hasCustomGetCachedData = options.getCachedData !== getDefaultCachedData;\n  const handler = import.meta.client || !import.meta.prerender || !nuxtApp.ssrContext?._sharedPrerenderCache ? _handler : () => {\n    const value = nuxtApp.ssrContext._sharedPrerenderCache.get(key);\n    if (value) {\n      return value;\n    }\n    const promise = Promise.resolve().then(() => nuxtApp.runWithContext(() => _handler(nuxtApp)));\n    nuxtApp.ssrContext._sharedPrerenderCache.set(key, promise);\n    return promise;\n  };\n  const _ref = options.deep ? ref : shallowRef;\n  const hasCachedData = initialCachedData !== void 0;\n  const unsubRefreshAsyncData = nuxtApp.hook(\"app:data:refresh\", async (keys) => {\n    if (!keys || keys.includes(key)) {\n      await asyncData.execute({ cause: \"refresh:hook\" });\n    }\n  });\n  const asyncData = {\n    data: _ref(hasCachedData ? initialCachedData : options.default()),\n    pending: pendingWhenIdle ? shallowRef(!hasCachedData) : computed(() => asyncData.status.value === \"pending\"),\n    error: toRef(nuxtApp.payload._errors, key),\n    status: shallowRef(\"idle\"),\n    execute: (...args) => {\n      const [_opts, newValue = void 0] = args;\n      const opts = _opts && newValue === void 0 && typeof _opts === \"object\" ? _opts : {};\n      if (import.meta.dev && newValue !== void 0 && (!_opts || typeof _opts !== \"object\")) {\n        console.warn(`[nuxt] [${options._functionName}] Do not pass \\`execute\\` directly to \\`watch\\`. Instead, use an inline function, such as \\`watch(q, () => execute())\\`.`);\n      }\n      if (nuxtApp._asyncDataPromises[key]) {\n        if ((opts.dedupe ?? options.dedupe) === \"defer\") {\n          return nuxtApp._asyncDataPromises[key];\n        }\n        nuxtApp._asyncDataPromises[key].cancelled = true;\n      }\n      if (granularCachedData || opts.cause === \"initial\" || nuxtApp.isHydrating) {\n        const cachedData = \"cachedData\" in opts ? opts.cachedData : options.getCachedData(key, nuxtApp, { cause: opts.cause ?? \"refresh:manual\" });\n        if (cachedData !== void 0) {\n          nuxtApp.payload.data[key] = asyncData.data.value = cachedData;\n          asyncData.error.value = void 0;\n          asyncData.status.value = \"success\";\n          return Promise.resolve(cachedData);\n        }\n      }\n      if (pendingWhenIdle) {\n        asyncData.pending.value = true;\n      }\n      asyncData.status.value = \"pending\";\n      const promise = new Promise(\n        (resolve, reject) => {\n          try {\n            resolve(handler(nuxtApp));\n          } catch (err) {\n            reject(err);\n          }\n        }\n      ).then(async (_result) => {\n        if (promise.cancelled) {\n          return nuxtApp._asyncDataPromises[key];\n        }\n        let result = _result;\n        if (options.transform) {\n          result = await options.transform(_result);\n        }\n        if (options.pick) {\n          result = pick(result, options.pick);\n        }\n        if (import.meta.dev && import.meta.server && typeof result === \"undefined\") {\n          const stack = captureStackTrace();\n          const { source, line, column } = stack[stack.length - 1] ?? {};\n          const explanation = source ? ` (used at ${source.replace(/^file:\\/\\//, \"\")}:${line}:${column})` : \"\";\n          console.warn(`[nuxt] \\`${options._functionName || \"useAsyncData\"}${explanation}\\` must return a value (it should not be \\`undefined\\`) or the request may be duplicated on the client side.`);\n        }\n        nuxtApp.payload.data[key] = result;\n        asyncData.data.value = result;\n        asyncData.error.value = void 0;\n        asyncData.status.value = \"success\";\n      }).catch((error) => {\n        if (promise.cancelled) {\n          return nuxtApp._asyncDataPromises[key];\n        }\n        asyncData.error.value = createError(error);\n        asyncData.data.value = unref(options.default());\n        asyncData.status.value = \"error\";\n      }).finally(() => {\n        if (promise.cancelled) {\n          return;\n        }\n        if (pendingWhenIdle) {\n          asyncData.pending.value = false;\n        }\n        delete nuxtApp._asyncDataPromises[key];\n      });\n      nuxtApp._asyncDataPromises[key] = promise;\n      return nuxtApp._asyncDataPromises[key];\n    },\n    _execute: debounce((...args) => asyncData.execute(...args), 0, { leading: true }),\n    _default: options.default,\n    _deps: 0,\n    _init: true,\n    _hash: isDev ? createHash(_handler, options) : void 0,\n    _off: () => {\n      unsubRefreshAsyncData();\n      if (nuxtApp._asyncData[key]?._init) {\n        nuxtApp._asyncData[key]._init = false;\n      }\n      if (purgeCachedData && !hasCustomGetCachedData) {\n        nextTick(() => {\n          if (!nuxtApp._asyncData[key]?._init) {\n            clearNuxtDataByKey(nuxtApp, key);\n            asyncData.execute = () => Promise.resolve();\n          }\n        });\n      }\n    }\n  };\n  return asyncData;\n}\nconst getDefault = () => void 0;\nconst getDefaultCachedData = (key, nuxtApp, ctx) => {\n  if (nuxtApp.isHydrating) {\n    return nuxtApp.payload.data[key];\n  }\n  if (ctx.cause !== \"refresh:manual\" && ctx.cause !== \"refresh:hook\") {\n    return nuxtApp.static.data[key];\n  }\n};\nfunction createHash(_handler, options) {\n  return {\n    handler: hash(_handler),\n    transform: options.transform ? hash(options.transform) : void 0,\n    pick: options.pick ? hash(options.pick) : void 0,\n    getCachedData: options.getCachedData ? hash(options.getCachedData) : void 0\n  };\n}\n"],"names":["DEBOUNCE_DEFAULTS","debounce","fn","wait","options","leadingValue","timeout","resolveList","currentPromise","trailingArgs","applyFn","_this","args","_applyPromised","promise","resolve","shouldCallNow","_resolve","useAsyncData","autoKey","_isAutoKeyNeeded","_key","_handler","key","computed","toValue","nuxtApp","useNuxtApp","getDefault","getDefaultCachedData","asyncDataDefaults","initialFetchOptions","createAsyncData","asyncData","initialFetch","fetchOnServer","unregister","key2","data","instance","getCurrentInstance","cbs","onBeforeMount","cb","onUnmounted","isWithinClientOnly","inject","clientOnlySymbol","hasScope","getCurrentScope","unsubExecute","watch","newKey","oldKey","hasRun","isRunning","initialFetchOptions2","value","onScopeDispose","asyncReturn","writableComputedRef","args2","clearNuxtDataByKey","asyncDataPromise","getter","ref2","keyOrFetcher","fetcher","unref","pick","obj","keys","newObj","initialCachedData","hasCustomGetCachedData","handler","_ref","ref","shallowRef","hasCachedData","unsubRefreshAsyncData","toRef","_opts","newValue","opts","cachedData","reject","err","_result","result","error","createError","nextTick","ctx"],"mappings":"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","x_google_ignoreList":[0,1]}