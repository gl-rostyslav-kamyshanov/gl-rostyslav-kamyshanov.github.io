{"version":3,"file":"DJvLPpT0.js","sources":["../../../../app/services/teams.ts"],"sourcesContent":["import useRequest from \"~/composables/use-request\";\nimport { ORDER, SORT } from \"~/constants\";\nimport { formatPaginatedResponseItems, formatRequestOptions, formatTeam } from \"./format\";\n\nconst TeamsAPI = {\n  load(options?: IRequestPaginatedOptions & { identityId?: string }): Promise<IPaginatedResponse<IModelIdentityItem>> {\n    const { request } = useRequest();\n    const params: IRequestPaginatedParams & { filters?: IRequestParamFilter } = formatRequestOptions(options);\n\n    if (options?.identityId) {\n      if (params.filters)\n        params.filters[\"identities.type\"] = options?.identityId;\n      else\n        params.filters = { \"identities.type\": options?.identityId };\n    }\n\n    params.order = ORDER.asc;\n    params.sort = SORT.title;\n\n    return request\n      .post<IPaginatedResponse<IResponseTeam>>(\"/api/team/list\", { body: params })\n      .then(response => formatPaginatedResponseItems(response, formatTeam));\n  },\n\n  loadById(teamId: string): Promise<IModelIdentityItem> {\n    const { request } = useRequest();\n\n    return request\n      .get<IContentResponse<IResponseTeam>>(`/api/team/get_by_id/id/${teamId}`)\n      .then(async (response) => {\n        return formatTeam(response.content);\n      });\n  },\n};\n\nexport default TeamsAPI;\n"],"names":["TeamsAPI","options","request","useRequest","params","formatRequestOptions","ORDER","SORT","response","formatPaginatedResponseItems","formatTeam","teamId"],"mappings":"kGAIA,MAAMA,EAAW,CACf,KAAKC,EAA+G,CAClH,KAAM,CAAE,QAAAC,CAAA,EAAYC,EAAA,EACdC,EAAsEC,EAAqBJ,CAAO,EAExG,OAAIA,GAAS,aACPG,EAAO,QACTA,EAAO,QAAQ,iBAAiB,EAAIH,GAAS,WAE7CG,EAAO,QAAU,CAAE,kBAAmBH,GAAS,UAAA,GAGnDG,EAAO,MAAQE,EAAM,IACrBF,EAAO,KAAOG,EAAK,MAEZL,EACJ,KAAwC,iBAAkB,CAAE,KAAME,CAAA,CAAQ,EAC1E,KAAKI,GAAYC,EAA6BD,EAAUE,CAAU,CAAC,CACxE,EAEA,SAASC,EAA6C,CACpD,KAAM,CAAE,QAAAT,CAAA,EAAYC,EAAA,EAEpB,OAAOD,EACJ,IAAqC,0BAA0BS,CAAM,EAAE,EACvE,KAAK,MAAOH,GACJE,EAAWF,EAAS,OAAO,CACnC,CACL,CACF"}